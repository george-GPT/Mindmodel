/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/games/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View game configurations. */
        get: operations["api_games_config_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/config/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View game configurations. */
        get: operations["api_games_config_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/games/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all available games
         * @description Returns a list of all active cognitive assessment games
         */
        get: operations["api_games_games_list"];
        put?: never;
        /** @description ViewSet for managing cognitive assessment games. */
        post: operations["api_games_games_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/games/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing cognitive assessment games. */
        get: operations["api_games_games_retrieve"];
        /** @description ViewSet for managing cognitive assessment games. */
        put: operations["api_games_games_update"];
        post?: never;
        /** @description ViewSet for managing cognitive assessment games. */
        delete: operations["api_games_games_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for managing cognitive assessment games. */
        patch: operations["api_games_games_partial_update"];
        trace?: never;
    };
    "/api/games/games/{id}/record_score/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record game score
         * @description Save a user's game score and performance data
         */
        post: operations["api_games_games_record_score_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/progress/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle game progress operations. */
        get: operations["api_games_progress_list"];
        put?: never;
        /** @description Handle game progress operations. */
        post: operations["api_games_progress_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/progress/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle game progress operations. */
        get: operations["api_games_progress_retrieve"];
        /** @description Handle game progress operations. */
        put: operations["api_games_progress_update"];
        post?: never;
        /** @description Handle game progress operations. */
        delete: operations["api_games_progress_destroy"];
        options?: never;
        head?: never;
        /** @description Handle game progress operations. */
        patch: operations["api_games_progress_partial_update"];
        trace?: never;
    };
    "/api/surveys/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all surveys. */
        get: operations["api_surveys_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/surveys/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a specific survey. */
        get: operations["api_surveys_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/surveys/{id}/submit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Submit a survey response. */
        post: operations["api_surveys_submit_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/2fa/disable/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable two-factor authentication
         * @description Disable two-factor authentication for the authenticated user
         */
        post: operations["api_users_auth_2fa_disable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/2fa/enable/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable two-factor authentication
         * @description Enable two-factor authentication for the authenticated user
         */
        post: operations["api_users_auth_2fa_enable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/auth/google/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Google OAuth authentication
         * @description Authenticate user with Google OAuth credential
         */
        post: operations["api_users_auth_auth_google_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user and return JWT tokens
         */
        post: operations["api_users_auth_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout user
         * @description Logout the authenticated user
         */
        post: operations["api_users_auth_auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/auth/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_users_auth_auth_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/auth/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Register a new user account
         */
        post: operations["api_users_auth_auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/change-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user email
         * @description Change the user's email
         */
        post: operations["api_users_auth_change_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/change-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user password
         * @description Change the user's password
         */
        post: operations["api_users_auth_change_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle user profile operations */
        get: operations["api_users_auth_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/member/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle member profile operations */
        get: operations["api_users_auth_member_profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Handle member profile operations */
        patch: operations["api_users_auth_member_profile_partial_update"];
        trace?: never;
    };
    "/api/users/auth/member/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Handle member registration/upgrade */
        post: operations["api_users_auth_member_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Retrieve the authenticated user's profile
         */
        get: operations["api_users_auth_profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user profile
         * @description Update the authenticated user's profile
         */
        patch: operations["api_users_auth_profile_partial_update"];
        trace?: never;
    };
    "/api/users/auth/resend-verification/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Resend verification email */
        post: operations["api_users_auth_resend_verification_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/verify-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Handle email verification */
        post: operations["api_users_auth_verify_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description * `easy` - Easy
         *     * `medium` - Medium
         *     * `hard` - Hard
         * @enum {string}
         */
        DifficultyEnum: "easy" | "medium" | "hard";
        EmailTokenObtainPairRequest: {
            email: string;
            password: string;
        };
        /** @description Serializer for Game model with complete game information. */
        Game: {
            readonly id: number;
            title: string;
            description?: string;
            config?: unknown;
            is_active?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /** @description Serializer for GameConfig model to handle game settings. */
        GameConfig: {
            readonly id: number;
            game_id: string;
            title: string;
            description: string;
            instructions: string;
            min_score?: number;
            max_score: number;
            time_limit?: number | null;
            difficulty: components["schemas"]["DifficultyEnum"];
            category: string;
            required_for_completion?: boolean;
        };
        /** @description Serializer for GameProgress model to track user progress. */
        GameProgress: {
            readonly id: number;
            user: number;
            game_id: string;
            current_level?: number;
            current_score?: number;
            time_spent?: number;
            /** Format: date-time */
            readonly last_played: string;
            completed?: boolean;
        };
        /** @description Serializer for GameProgress model to track user progress. */
        GameProgressRequest: {
            user: number;
            game_id: string;
            current_level?: number;
            current_score?: number;
            time_spent?: number;
            completed?: boolean;
        };
        /** @description Serializer for Game model with complete game information. */
        GameRequest: {
            title: string;
            description?: string;
            config?: unknown;
            is_active?: boolean;
            /** Format: date-time */
            created_at?: string;
        };
        /** @description Serializer for GameScore model to handle game results. */
        GameScore: {
            readonly id: number;
            readonly user: number;
            game: number;
            score: number;
            completion_time?: string | null;
            metadata?: unknown;
            completed?: boolean;
            /** Format: date-time */
            readonly played_at: string;
        };
        /** @description Serializer for GameScore model to handle game results. */
        GameScoreRequest: {
            game: number;
            score: number;
            completion_time?: string | null;
            metadata?: unknown;
            completed?: boolean;
        };
        PaginatedGameConfigList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["GameConfig"][];
        };
        PaginatedGameList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Game"][];
        };
        PaginatedGameProgressList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["GameProgress"][];
        };
        PaginatedSurveyList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Survey"][];
        };
        /** @description Serializer for GameProgress model to track user progress. */
        PatchedGameProgressRequest: {
            user?: number;
            game_id?: string;
            current_level?: number;
            current_score?: number;
            time_spent?: number;
            completed?: boolean;
        };
        /** @description Serializer for Game model with complete game information. */
        PatchedGameRequest: {
            title?: string;
            description?: string;
            config?: unknown;
            is_active?: boolean;
            /** Format: date-time */
            created_at?: string;
        };
        Survey: {
            readonly id: number;
            title: string;
            description?: string;
            questions: unknown;
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        SurveyResponse: {
            readonly id: number;
            survey: number;
            responses: unknown;
            completed?: boolean;
            /** Format: date-time */
            readonly submitted_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        SurveyResponseRequest: {
            survey: number;
            responses: unknown;
            completed?: boolean;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_games_config_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGameConfigList"];
                };
            };
        };
    };
    api_games_config_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game config. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameConfig"];
                };
            };
        };
    };
    api_games_games_list: {
        parameters: {
            query?: {
                /** @description Filter games by category */
                category?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGameList"];
                };
            };
        };
    };
    api_games_games_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GameRequest"];
                "multipart/form-data": components["schemas"]["GameRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
        };
    };
    api_games_games_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
        };
    };
    api_games_games_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GameRequest"];
                "multipart/form-data": components["schemas"]["GameRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
        };
    };
    api_games_games_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_games_games_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGameRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGameRequest"];
                "multipart/form-data": components["schemas"]["PatchedGameRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
        };
    };
    api_games_games_record_score_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameScoreRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GameScoreRequest"];
                "multipart/form-data": components["schemas"]["GameScoreRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameScore"];
                };
            };
        };
    };
    api_games_progress_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGameProgressList"];
                };
            };
        };
    };
    api_games_progress_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameProgressRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GameProgressRequest"];
                "multipart/form-data": components["schemas"]["GameProgressRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameProgress"];
                };
            };
        };
    };
    api_games_progress_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game progress. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameProgress"];
                };
            };
        };
    };
    api_games_progress_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game progress. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameProgressRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GameProgressRequest"];
                "multipart/form-data": components["schemas"]["GameProgressRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameProgress"];
                };
            };
        };
    };
    api_games_progress_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game progress. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_games_progress_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this game progress. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGameProgressRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGameProgressRequest"];
                "multipart/form-data": components["schemas"]["PatchedGameProgressRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameProgress"];
                };
            };
        };
    };
    api_surveys_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSurveyList"];
                };
            };
        };
    };
    api_surveys_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Survey"];
                };
            };
        };
    };
    api_surveys_submit_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SurveyResponseRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SurveyResponseRequest"];
                "multipart/form-data": components["schemas"]["SurveyResponseRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SurveyResponse"];
                };
            };
        };
    };
    api_users_auth_2fa_disable_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_2fa_enable_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_auth_google_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_users_auth_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailTokenObtainPairRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EmailTokenObtainPairRequest"];
                "multipart/form-data": components["schemas"]["EmailTokenObtainPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                        data?: {
                            /** @description JWT access token */
                            access?: string;
                            /** @description JWT refresh token */
                            refresh?: string;
                            /** @description User details */
                            user?: Record<string, never>;
                        };
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_auth_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    api_users_auth_auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                type: {
                    [key: string]: unknown;
                };
                properties: unknown;
                required: {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                        data?: {
                            user?: Record<string, never>;
                            access?: string;
                            refresh?: string;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_change_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                type: {
                    [key: string]: unknown;
                };
                properties: unknown;
                required: {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_change_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                type: {
                    [key: string]: unknown;
                };
                properties: unknown;
                required: {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_auth_member_profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_auth_member_profile_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_auth_member_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_auth_profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                        data?: Record<string, never>;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_profile_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                type: {
                    [key: string]: unknown;
                };
                properties: unknown;
                required: {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        success: boolean;
                        message?: string;
                        data?: Record<string, never>;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default false */
                        success: boolean;
                        message?: string;
                        error?: {
                            code?: string;
                            details?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_resend_verification_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_auth_verify_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
