/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/games/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View game configurations. */
        get: operations["api_games_config_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View game configurations. */
        get: operations["api_games_config_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing cognitive assessment games. */
        get: operations["api_games_games_retrieve"];
        /** @description ViewSet for managing cognitive assessment games. */
        put: operations["api_games_games_update"];
        post?: never;
        /** @description ViewSet for managing cognitive assessment games. */
        delete: operations["api_games_games_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for managing cognitive assessment games. */
        patch: operations["api_games_games_partial_update"];
        trace?: never;
    };
    "/api/games/{id}/record_score": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record game score
         * @description Save a user's game score and performance data
         */
        post: operations["api_games_games_record_score_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle game progress operations. */
        get: operations["api_games_progress_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/progress/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle game progress operations. */
        get: operations["api_games_progress_retrieve"];
        /** @description Handle game progress operations. */
        put: operations["api_games_progress_update"];
        post?: never;
        /** @description Handle game progress operations. */
        delete: operations["api_games_progress_destroy"];
        options?: never;
        head?: never;
        /** @description Handle game progress operations. */
        patch: operations["api_games_progress_partial_update"];
        trace?: never;
    };
    "/api/surveys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all surveys. */
        get: operations["api_surveys_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/surveys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a specific survey. */
        get: operations["api_surveys_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/surveys/{id}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Submit a survey response. */
        post: operations["api_surveys_submit_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/2fa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Enable/disable two-factor authentication */
        post: operations["api_users_auth_2fa_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/2fa/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable two-factor authentication
         * @description Disable two-factor authentication for the authenticated user
         */
        post: operations["api_users_auth_2fa_disable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/2fa/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable two-factor authentication
         * @description Enable two-factor authentication for the authenticated user
         */
        post: operations["api_users_auth_2fa_enable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Google OAuth authentication
         * @description Authenticate user with Google OAuth credential
         */
        post: operations["api_users_auth_auth_google_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user and return JWT tokens
         */
        post: operations["api_users_auth_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout user
         * @description Logout the authenticated user
         */
        post: operations["api_users_auth_auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_users_auth_auth_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Register a new user account
         */
        post: operations["api_users_auth_auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/change-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user email
         * @description Change the user's email
         */
        post: operations["api_users_auth_change_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user password
         * @description Change the user's password
         */
        post: operations["api_users_auth_change_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle user profile operations */
        get: operations["api_users_auth_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Retrieve the authenticated user's profile
         */
        get: operations["api_users_auth_profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user profile
         * @description Update the authenticated user's profile
         */
        patch: operations["api_users_auth_profile_partial_update"];
        trace?: never;
    };
    "/api/users/auth/resend-verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Resend email verification token to user's email address */
        post: operations["api_users_auth_resend_verification_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verify user email address with verification token */
        post: operations["api_users_auth_verify_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/member/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upgrade regular user account to member status */
        post: operations["api_users_member_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/member/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve current member profile details */
        get: operations["api_users_member_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update current member profile details */
        patch: operations["api_users_member_profile_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseResponse: {
            success: boolean;
            message?: string;
        };
        SuccessResponse: {
            /** @default true */
            success: boolean;
            message?: string;
            data?: Record<string, never>;
        };
        PaginatedResponse: components["schemas"]["SuccessResponse"] & {
            data?: {
                count?: number;
                /** Format: uri */
                next?: string | null;
                /** Format: uri */
                previous?: string | null;
                results?: Record<string, never>[];
            };
        };
        Game: {
            readonly id?: number;
            title: string;
            description?: string;
            config?: {
                [key: string]: unknown;
            };
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        GameRequest: {
            title: string;
            description?: string;
            config?: {
                [key: string]: unknown;
            };
            is_active?: boolean;
        };
        /** @description Serializer for GameProgress model to track user progress */
        GameProgress: {
            readonly id?: number;
            readonly user?: number;
            game_id: string;
            current_level: number;
            current_score: number;
            /** @description Time spent in seconds */
            time_spent: number;
            /** Format: date-time */
            readonly last_played?: string;
            completed: boolean;
        };
        GameProgressRequest: {
            game_id: string;
            current_level: number;
            current_score: number;
            /** @description Time spent in seconds */
            time_spent: number;
            completed: boolean;
        };
        /** @description Serializer for GameScore model */
        GameScore: {
            readonly id?: number;
            readonly user?: number;
            game: number;
            score: number;
            /** Format: duration */
            completion_time?: string | null;
            metadata?: components["schemas"]["MetadataObject"];
            completed?: boolean;
            /** Format: date-time */
            readonly played_at?: string;
        };
        GameScoreRequest: {
            metadata?: components["schemas"]["MetadataObject"];
            game: number;
            score: number;
            /**
             * Format: duration
             * @description Duration in ISO 8601 format (e.g. PT1H30M)
             */
            completion_time?: string | null;
            completed?: boolean;
        };
        /** @description Serializer for GameProgress model to track user progress. */
        PatchedGameProgressRequest: {
            user: number;
            game_id: string;
            current_level: number;
            current_score: number;
            time_spent: number;
            completed?: boolean;
        };
        /** @description Serializer for Game model with complete game information. */
        PatchedGameRequest: {
            title?: string;
            description?: string;
            config?: unknown;
            is_active?: boolean;
            /** Format: date-time */
            created_at?: string;
        };
        Survey: {
            readonly id: number;
            title: string;
            description?: string;
            questions: unknown;
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        SurveyResponse: {
            readonly id?: number;
            survey?: number;
            responses?: unknown;
            completed?: boolean;
            /** Format: date-time */
            readonly submitted_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            metadata?: components["schemas"]["MetadataObject"];
        };
        SurveyResponseRequest: {
            survey: number;
            responses: unknown;
            completed?: boolean;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
        UserProfile: {
            readonly id: number;
            username: string;
            /** Format: email */
            email: string;
            email_verified: boolean;
            first_name?: string | null;
            last_name?: string | null;
            /** Format: date-time */
            readonly date_joined?: string;
            readonly is_active?: boolean;
            readonly is_member: boolean;
            avatar_url?: string;
        };
        UserProfileRequest: {
            username: string;
            /** Format: email */
            email: string;
            first_name?: string | null;
            last_name?: string | null;
        };
        Pagination: {
            count: number;
            total_pages: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
        };
        /** @example {
         *       "items": [],
         *       "pagination": {
         *         "count": 0,
         *         "total_pages": 0,
         *         "next": null,
         *         "previous": null
         *       }
         *     } */
        PaginatedList: {
            items: {
                [key: string]: unknown;
            }[];
            pagination: components["schemas"]["Pagination"];
        };
        MetadataObject: {
            [key: string]: unknown;
        } | null;
        AuthResponse: {
            success: boolean;
            message?: string;
            data?: {
                access: string;
                refresh: string;
                user?: components["schemas"]["UserProfile"];
            };
        };
        TokenResponse: {
            success: boolean;
            message?: string;
            data?: {
                access: string;
                refresh: string;
                user: components["schemas"]["UserProfile"];
            };
        };
        EmailTokenObtainPairRequest: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        // AI Analysis schemas
        AIAnalysis: {
            id: number;
            status: 'pending' | 'processing' | 'completed' | 'failed';
            insights: {
                surveys?: {
                    summary: string;
                    key_findings: string[];
                    recommendations: string[];
                };
                games?: {
                    summary: string;
                    performance_metrics: {
                        accuracy: string;
                        speed: string;
                        consistency: string;
                    };
                };
                overall: {
                    summary: string;
                    strengths: string[];
                    areas_for_improvement: string[];
                    recommendations: string[];
                };
            };
            charts?: Record<string, unknown>;
            created_at: string;
            updated_at: string;
        };

        AIAnalysisRequest: {
            surveyData?: Record<string, unknown>;
            gameData?: Record<string, unknown>;
        };

        AIAnalysisResponse: {
            success: boolean;
            message?: string;
            data?: {
                task_id: string;
            };
        };

        AIAnalysisResult: {
            success: boolean;
            message?: string;
            data?: components['schemas']['AIAnalysis'];
        };

        UserSettings: {
            theme: 'light' | 'dark' | 'system';
            notifications: boolean;
            language: string;
            timezone: string;
        };

        LoginCredentials: {
            email: string;
            password: string;
        };

        SessionStatus: {
            isValid: boolean;
            remainingTime: number;
            warningIssued: boolean;
        };

        AuthResponse: {
            access: string;
            refresh: string;
            user: components["schemas"]["UserProfile"];
        };
    };
    responses: never;
    parameters: {
        /** @description Page number within the paginated result set. */
        PageNumber: number;
        /** @description Number of results to return per page. */
        PageSize: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_games_config_list: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved game configurations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["PaginatedList"];
                    };
                };
            };
        };
    };
    api_games_config_retrieve: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this game config. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved specific game configuration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Game"];
                    };
                };
            };
        };
    };
    api_games_games_retrieve: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved game details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Game"];
                    };
                };
            };
        };
    };
    api_games_games_update: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameRequest"];
                };
                "multipart/form-data": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameRequest"];
                };
                "application/x-www-form-urlencoded": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated game */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Game"];
                    };
                };
            };
        };
    };
    api_games_games_destroy: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_games_games_partial_update: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGameRequest"];
                "multipart/form-data": components["schemas"]["PatchedGameRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGameRequest"];
            };
        };
        responses: {
            /** @description Successfully patched game */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
        };
    };
    api_games_games_record_score_create: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this game. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameScoreRequest"];
                };
                "multipart/form-data": components["schemas"]["GameScoreRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GameScoreRequest"];
            };
        };
        responses: {
            /** @description Successfully recorded game score */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["GameScore"];
                    };
                };
            };
        };
    };
    api_games_progress_list: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved game progress list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["PaginatedList"] & {
                            items?: components["schemas"]["GameProgress"][];
                        };
                    };
                };
            };
        };
    };
    api_games_progress_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved game progress */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["GameProgress"];
                    };
                };
            };
        };
    };
    api_games_progress_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameProgressRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated game progress */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["GameProgress"];
                    };
                };
            };
        };
    };
    api_games_progress_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_games_progress_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameProgressRequest"];
                };
                "multipart/form-data": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameProgressRequest"];
                };
                "application/x-www-form-urlencoded": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["GameProgressRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully patched game progress */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["GameProgress"];
                    };
                };
            };
        };
    };
    api_surveys_list: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved surveys list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedList"];
                };
            };
        };
    };
    api_surveys_retrieve: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved survey details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Survey"];
                };
            };
        };
    };
    api_surveys_submit_create: {
        parameters: {
            query?: {
                /** @description Page number within the paginated result set. */
                page?: components["parameters"]["PageNumber"];
                /** @description Number of results to return per page. */
                page_size?: components["parameters"]["PageSize"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["SurveyResponseRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully submitted survey response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["SurveyResponse"];
                    };
                };
            };
        };
    };
    api_users_auth_2fa_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully toggled 2FA status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: {
                            enabled?: boolean;
                        };
                    };
                };
            };
        };
    };
    api_users_auth_2fa_disable_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully disabled two-factor authentication */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_auth_2fa_enable_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully enabled two-factor authentication */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_auth_auth_google_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully authenticated with Google */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
        };
    };
    api_users_auth_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmailTokenObtainPairRequest"];
            };
        };
        responses: {
            /** @description Successfully authenticated user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    api_users_auth_auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_auth_auth_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            /** @description Successfully refreshed access token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["TokenRefresh"];
                    };
                };
            };
        };
    };
    api_users_auth_auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: email */
                    email: string;
                    username: string;
                    /** Format: password */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Successfully registered new user account */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_auth_change_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: email */
                    new_email: string;
                    /** Format: password */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Successfully changed user email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_auth_change_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: password */
                    old_password: string;
                    /** Format: password */
                    new_password: string;
                };
            };
        };
        responses: {
            /** @description Successfully changed user password */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_auth_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved authenticated user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
        };
    };
    api_users_auth_profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["UserProfile"];
                    };
                };
            };
        };
    };
    api_users_auth_profile_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    username: string;
                    /** Format: email */
                    email: string;
                    first_name: string;
                    last_name: string;
                };
            };
        };
        responses: {
            /** @description Successfully updated user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["UserProfile"];
                    };
                };
            };
        };
    };
    api_users_auth_resend_verification_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully resent verification email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_auth_verify_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully verified email address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_member_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully registered/upgraded member account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    api_users_member_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved current user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["UserProfile"];
                    };
                };
            };
        };
    };
    api_users_member_profile_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SuccessResponse"] & {
                    data?: components["schemas"]["UserProfileRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated member profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["UserProfile"];
                    };
                };
            };
        };
    };
}
