openapi: 3.0.3
info:
  title: Your API
  version: 1.0.0
  description: Your API description
paths:
  /api/games/config/:
    get:
      operationId: api_games_config_list
      description: View game configurations.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGameConfigList'
          description: ''
  /api/games/config/{id}/:
    get:
      operationId: api_games_config_retrieve
      description: View game configurations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game config.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameConfig'
          description: ''
  /api/games/games/:
    get:
      operationId: api_games_games_list
      description: Returns a list of all active cognitive assessment games
      summary: List all available games
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Filter games by category
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - games
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGameList'
          description: ''
    post:
      operationId: api_games_games_create
      description: ViewSet for managing cognitive assessment games.
      tags:
      - games
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GameRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GameRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
  /api/games/games/{id}/:
    get:
      operationId: api_games_games_retrieve
      description: ViewSet for managing cognitive assessment games.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - games
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
    put:
      operationId: api_games_games_update
      description: ViewSet for managing cognitive assessment games.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - games
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GameRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GameRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
    patch:
      operationId: api_games_games_partial_update
      description: ViewSet for managing cognitive assessment games.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - games
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGameRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGameRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGameRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
    delete:
      operationId: api_games_games_destroy
      description: ViewSet for managing cognitive assessment games.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - games
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/games/games/{id}/record_score/:
    post:
      operationId: api_games_games_record_score_create
      description: Save a user's game score and performance data
      summary: Record game score
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - games
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameScoreRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GameScoreRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GameScoreRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameScore'
          description: ''
  /api/games/progress/:
    get:
      operationId: api_games_progress_list
      description: Handle game progress operations.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGameProgressList'
          description: ''
    post:
      operationId: api_games_progress_create
      description: Handle game progress operations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameProgressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GameProgressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GameProgressRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameProgress'
          description: ''
  /api/games/progress/{id}/:
    get:
      operationId: api_games_progress_retrieve
      description: Handle game progress operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game progress.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameProgress'
          description: ''
    put:
      operationId: api_games_progress_update
      description: Handle game progress operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game progress.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameProgressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GameProgressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GameProgressRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameProgress'
          description: ''
    patch:
      operationId: api_games_progress_partial_update
      description: Handle game progress operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game progress.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGameProgressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGameProgressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGameProgressRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameProgress'
          description: ''
    delete:
      operationId: api_games_progress_destroy
      description: Handle game progress operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game progress.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/surveys/:
    get:
      operationId: api_surveys_list
      description: List all surveys.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSurveyList'
          description: ''
  /api/surveys/{id}/:
    get:
      operationId: api_surveys_retrieve
      description: Retrieve a specific survey.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
  /api/surveys/{id}/submit/:
    post:
      operationId: api_surveys_submit_create
      description: Submit a survey response.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyResponseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SurveyResponseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SurveyResponseRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyResponse'
          description: ''
  /api/users/auth/2fa/disable/:
    post:
      operationId: api_users_auth_2fa_disable_create
      description: Disable two-factor authentication for the authenticated user
      summary: Disable two-factor authentication
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/2fa/enable/:
    post:
      operationId: api_users_auth_2fa_enable_create
      description: Enable two-factor authentication for the authenticated user
      summary: Enable two-factor authentication
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/auth/google/:
    post:
      operationId: api_users_auth_auth_google_create
      description: Authenticate user with Google OAuth credential
      summary: Google OAuth authentication
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                code: invalid_credentials
                message: Invalid email or password
                status: 401
                example:
                  success: false
                  message: Authentication failed
                  error:
                    code: invalid_credentials
                    details:
                      message: Invalid email or password
          description: ''
        '401':
          content:
            application/json:
              schema:
                code: token_invalid
                message: Token is invalid or malformed
                status: 401
                example:
                  success: false
                  message: Authentication failed
                  error:
                    code: token_invalid
                    details:
                      message: Token is invalid or malformed
          description: ''
  /api/users/auth/auth/login/:
    post:
      operationId: api_users_auth_auth_login_create
      description: Authenticate user and return JWT tokens
      summary: User login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTokenObtainPairRequest'
            examples:
              LoginSuccess:
                value:
                  success: true
                  message: Login successful
                  data:
                    access: eyJ0eXAiOiJKV1QiLCJhbGc...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGc...
                    user:
                      id: 1
                      username: testuser
                      email: test@example.com
                      is_verified: true
                summary: Login Success
              AuthenticationError:
                value:
                  success: false
                  message: Authentication failed
                  error:
                    code: invalid_credentials
                    details:
                      message: Invalid email or password
                summary: Authentication Error
              SuccessResponse:
                value:
                  success: true
                  message: Login successful
                  data:
                    access: eyJ0eXAiOiJKV1QiLCJhbGc...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGc...
                    user:
                      id: 1
                      username: testuser
                      email: test@example.com
                      is_verified: true
                summary: Success Response
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailTokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      access:
                        type: string
                        description: JWT access token
                      refresh:
                        type: string
                        description: JWT refresh token
                      user:
                        type: object
                        description: User details
              examples:
                LoginSuccess:
                  value:
                    success: true
                    message: Login successful
                    data:
                      access: eyJ0eXAiOiJKV1QiLCJhbGc...
                      refresh: eyJ0eXAiOiJKV1QiLCJhbGc...
                      user:
                        id: 1
                        username: testuser
                        email: test@example.com
                        is_verified: true
                  summary: Login Success
                AuthenticationError:
                  value:
                    success: false
                    message: Authentication failed
                    error:
                      code: invalid_credentials
                      details:
                        message: Invalid email or password
                  summary: Authentication Error
                SuccessResponse:
                  value:
                    success: true
                    message: Login successful
                    data:
                      access: eyJ0eXAiOiJKV1QiLCJhbGc...
                      refresh: eyJ0eXAiOiJKV1QiLCJhbGc...
                      user:
                        id: 1
                        username: testuser
                        email: test@example.com
                        is_verified: true
                  summary: Success Response
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/auth/logout/:
    post:
      operationId: api_users_auth_auth_logout_create
      description: Logout the authenticated user
      summary: Logout user
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/auth/refresh/:
    post:
      operationId: api_users_auth_auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/auth/auth/register/:
    post:
      operationId: api_users_auth_auth_register_create
      description: Register a new user account
      summary: User registration
      tags:
      - auth
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              email:
                type: string
                format: email
              username:
                type: string
                minLength: 3
              password:
                type: string
                minLength: 8
          required:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                      access:
                        type: string
                      refresh:
                        type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/change-email/:
    post:
      operationId: api_users_auth_change_email_create
      description: Change the user's email
      summary: Change user email
      tags:
      - auth
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              new_email:
                type: string
                format: email
              password:
                type: string
                minLength: 8
          required:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/change-password/:
    post:
      operationId: api_users_auth_change_password_create
      description: Change the user's password
      summary: Change user password
      tags:
      - auth
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              old_password:
                type: string
                minLength: 8
              new_password:
                type: string
                minLength: 8
          required:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/me/:
    get:
      operationId: api_users_auth_me_retrieve
      description: Handle user profile operations
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/users/auth/member/profile/:
    get:
      operationId: api_users_auth_member_profile_retrieve
      description: Handle member profile operations
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_users_auth_member_profile_partial_update
      description: Handle member profile operations
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/users/auth/member/register/:
    post:
      operationId: api_users_auth_member_register_create
      description: Handle member registration/upgrade
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/users/auth/profile/:
    get:
      operationId: api_users_auth_profile_retrieve
      description: Retrieve the authenticated user's profile
      summary: Get user profile
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                  data:
                    type: object
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
    patch:
      operationId: api_users_auth_profile_partial_update
      description: Update the authenticated user's profile
      summary: Update user profile
      tags:
      - auth
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              username:
                type: string
                minLength: 3
              email:
                type: string
                format: email
              first_name:
                type: string
              last_name:
                type: string
          required:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                  data:
                    type: object
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      details:
                        type: object
          description: ''
  /api/users/auth/resend-verification/:
    post:
      operationId: api_users_auth_resend_verification_create
      description: Resend verification email
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/users/auth/verify-email/:
    post:
      operationId: api_users_auth_verify_email_create
      description: Handle email verification
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    DifficultyEnum:
      enum:
      - easy
      - medium
      - hard
      type: string
      description: |-
        * `easy` - Easy
        * `medium` - Medium
        * `hard` - Hard
    EmailTokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    Game:
      type: object
      description: Serializer for Game model with complete game information.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        config: {}
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - title
      - updated_at
    GameConfig:
      type: object
      description: Serializer for GameConfig model to handle game settings.
      properties:
        id:
          type: integer
          readOnly: true
        game_id:
          type: string
          maxLength: 100
        title:
          type: string
          maxLength: 200
        description:
          type: string
        instructions:
          type: string
        min_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        max_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        difficulty:
          $ref: '#/components/schemas/DifficultyEnum'
        category:
          type: string
          maxLength: 100
        required_for_completion:
          type: boolean
      required:
      - category
      - description
      - difficulty
      - game_id
      - id
      - instructions
      - max_score
      - title
    GameProgress:
      type: object
      description: Serializer for GameProgress model to track user progress.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        game_id:
          type: string
          maxLength: 100
        current_level:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        current_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        time_spent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        last_played:
          type: string
          format: date-time
          readOnly: true
        completed:
          type: boolean
      required:
      - game_id
      - id
      - last_played
      - user
    GameProgressRequest:
      type: object
      description: Serializer for GameProgress model to track user progress.
      properties:
        user:
          type: integer
        game_id:
          type: string
          minLength: 1
          maxLength: 100
        current_level:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        current_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        time_spent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        completed:
          type: boolean
      required:
      - game_id
      - user
    GameRequest:
      type: object
      description: Serializer for Game model with complete game information.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        config: {}
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
      required:
      - title
    GameScore:
      type: object
      description: Serializer for GameScore model to handle game results.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        game:
          type: integer
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        completion_time:
          type: string
          nullable: true
        metadata:
          nullable: true
        completed:
          type: boolean
        played_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - game
      - id
      - played_at
      - score
      - user
    GameScoreRequest:
      type: object
      description: Serializer for GameScore model to handle game results.
      properties:
        game:
          type: integer
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        completion_time:
          type: string
          nullable: true
        metadata:
          nullable: true
        completed:
          type: boolean
      required:
      - game
      - score
    PaginatedGameConfigList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GameConfig'
    PaginatedGameList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Game'
    PaginatedGameProgressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GameProgress'
    PaginatedSurveyList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Survey'
    PatchedGameProgressRequest:
      type: object
      description: Serializer for GameProgress model to track user progress.
      properties:
        user:
          type: integer
        game_id:
          type: string
          minLength: 1
          maxLength: 100
        current_level:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        current_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        time_spent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        completed:
          type: boolean
    PatchedGameRequest:
      type: object
      description: Serializer for Game model with complete game information.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        config: {}
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
    Survey:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        questions: {}
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - questions
      - title
      - updated_at
    SurveyResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        survey:
          type: integer
        responses: {}
        completed:
          type: boolean
        submitted_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - responses
      - submitted_at
      - survey
      - updated_at
    SurveyResponseRequest:
      type: object
      properties:
        survey:
          type: integer
        responses: {}
        completed:
          type: boolean
      required:
      - responses
      - survey
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
